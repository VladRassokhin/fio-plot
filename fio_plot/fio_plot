#!/usr/bin/env python3
#
# Generates graphs from FIO output data for various IO queue depthts
#
# Output in PNG format.
#
# Requires matplotib and numpy.
#
import sys
import matplotlib.pyplot as plt
from matplotlib import cm
import matplotlib as mpl
import numpy as np
import argparse
import pprint
from collections import defaultdict
import fiolib.dataimport as logdata
import fiolib.graph2d as graph
import fiolib.jsonimport as jsonimport
import fiolib.bar2d as bar2d
import fiolib.bar3d as bar3d
import fiolib.barhistogram as hisogram


def set_arguments():

    parser = argparse.ArgumentParser(description="Convert FIO JSON output \
            to charts")
    ag = parser.add_argument_group(title="Generic Settings")
    ag.add_argument("-i", "--input-directory", help="input directory where\
            JSON files can be found")
    ag.add_argument("-t", "--title", help="specifies title to use in charts")
    ag.add_argument("-s", "--source", help="Author")
    ag.add_argument("-L", "--latency_iops_3d", action='store_true', help="\
            generate latency + iops 3d")
    ag.add_argument("-l", "--latency_iops_2d", action='store_true', help="\
            generate latency + iops 2d graph")
    ag.add_argument("-H", "--histogram", action='store_true', help="\
            generate latency histogram per queue depth")
    ag.add_argument("--disable-grid", action='store_true', help="\
            disable the dotted grid in the output png")
    ag.add_argument("--enable-markers", action='store_true', help="\
            enable markers for the plot lines")
    ag.add_argument("--subtitle", help="\
            specify your own subtitle or leave it blank with double quotes", type=str, default=None)
    ag.add_argument("-I", "--iodepth", type=int, nargs='+', default=1, help="\
            iodepth to graph")
    ag.add_argument("-D", "--maxdepth", nargs='?', default=64, type=int, help="\
            maximum queue depth to graph")
    ag.add_argument("-d", "--dpi", help="\
            dpi of output png", nargs='?', default=200, type=int)
    ag.add_argument("-p", "--percentile", help="\
            calculate percentile, default 99.9th", nargs='?', default=99, type=float)
    ag.add_argument("-J", "--maxjobs", help="\
            maximum numjobs to graph in 3d graph", nargs='?', default=64, type=int)
    ag.add_argument("-n", "--numjobs", nargs='+', help="\
            specifies for which numjob parameter you want the 2d graphs to be\
                 generated", default=[1], type=int)
    ag.add_argument("-r", "--rw", choices=['read', 'write', 'randread', 'randwrite', 'randrw'],
                    help="read/write mode randread/randwrite")
    ag.add_argument("-m", "--max", default=None, type=int,
                    help=" optional max value for z-axis")
    ag.add_argument("--max-y", help=" optional max value for y-axis")
    ag.add_argument("-g", "--loggraph", action='store_true',
                    help="Create graph based on raw log data")
    ag.add_argument("-e", "--moving-average", default=None, type=int,
                    help="The moving average helps to smooth out graphs,\
                         the argument is the size of the moving window\
                              (default is None to disable)")
    ag.add_argument("-T", "--type", nargs='+', help="\
            type should be iops,bw,lat,clat,slat", type=str,
                    choices=['bw', 'iops', 'lat', 'slat', 'clat'])
    ag.add_argument("-f", "--filter", nargs='+', help="\
            filter should be read/write/rw", type=str, default=('read', 'write'),
                    choices=['read', 'write'])

    return parser


def main():
    settings = {}
    parser = set_arguments()
    try:
        args = parser.parse_args()
    except OSError:
        parser.print_help()
        sys.exit(1)

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    settings = vars(args)

    if settings['loggraph']:
        benchmarkfiles = logdata.listFioLogFiles(settings['input_directory'])
        logfiles = logdata.filterLogFiles(settings, benchmarkfiles)
        rawdata = logdata.readLogDataFromFiles(settings, logfiles)
        merged = logdata.mergeDataSet(settings, rawdata)
        graph.chart_2d_log_data(settings, merged)

    if settings['latency_iops_3d']:
        list_of_json_files = jsonimport.list_json_files(settings)
        dataset = jsonimport.import_json_dataset(list_of_json_files)
        parsed_data = jsonimport.get_flat_json_mapping(dataset)
        bar3d.plot_3d(settings, parsed_data)

    #    b.chart_3d_iops_numjobs('randread','iops')
    #    b.chart_3d_iops_numjobs('randwrite','iops')
    #    b.chart_3d_iops_numjobs('randread','lat')
    #    b.chart_3d_iops_numjobs('randwrite','lat')

    if settings['latency_iops_2d']:
        list_of_json_files = jsonimport.list_json_files(settings)
        dataset = jsonimport.import_json_dataset(list_of_json_files)
        parsed_data = jsonimport.get_flat_json_mapping(dataset)
        bar2d.chart_2dbarchart_jsonlogdata(settings, parsed_data)

        # if settings['histogram']:
        #    b.chart_latency_histogram('randread')
        #    b.chart_latency_histogram('randwrite')

        # if not settings['histogram'] and not settings['latency_iops_2d'] and not settings['latency_iops_3d']:
        #    parser.print_help()
        #    print("Specify -L -l, -H or all of them")
        #    exit(1)


if __name__ == "__main__":
    main()
